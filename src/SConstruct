# -*- mode: python -*-

import sys, platform
arch = sys.platform

######################################################################
# user-configurable section

use_clang = (arch != 'linux2')

build_64bit = True

std_libs = [ 'pthread', 'm', 'c++' if use_clang else 'libstdc++' ]
cxx = 'clang' if use_clang else 'g++'
cxxflags = [ '-std=c++11', '-Wno-deprecated-register' ]
if use_clang:
    cxxflags.append('-stdlib=libc++')

Export('std_libs')

######################################################################
## Configure generic environment

Decider('MD5-timestamp')
#CacheDir('scons-cache')

#import os
#print "Pruning scons cache..."
#os.system('cd scons-cache && find . -type f -atime +1 -delete')

def setup_nice_print(env):
    if ARGUMENTS.get('VERBOSE') != '1':
        env['YACCCOMSTR'] = "Compiling $TARGET"
        env['LEXCOMSTR'] = "Compiling $TARGET"
        env['CCCOMSTR'] = "Compiling $TARGET"
        env['CXXCOMSTR'] = "Compiling $TARGET"
        env['LINKCOMSTR'] = "Linking $TARGET"
        env['ARCOMSTR'] = "Linking $TARGET"

env = Environment(CC = cxx,
                  CXX = cxx,
                  CCFLAGS = [ '-Wall', '-g' ],
                  CXXFLAGS = cxxflags,
                  CPPPATH = [ '#core', '#', '.' ],
#                  CPPDEFINES = [ 'PBRT_FLOAT_AS_DOUBLE' ],
                  LIBS = std_libs,
                  YACCFLAGS = [ '-d', '-v', '-t' ],
                  # FIXME: does this need to be .hpp on linux?
                  YACCHXXFILESUFFIX = '.hh',
                  ENV = { 'PATH' : [ '/usr/local/bin', '/usr/bin', '/bin',
                                     '/usr/sbin', '/sbin' ] })
if build_64bit:
    env.Append(CCFLAGS = [ '-m64' ],
               LINKFLAGS = [ '-m64' ])

setup_nice_print(env)

######################################################################

build_envs = { }

debug_env = env.Clone()
debug_env.Append(CPPDEFINES = [ 'DEBUG' ])
build_envs['debug'] = debug_env

release_env = env.Clone()
release_env.Append(CCFLAGS = [ '-O2' ])
release_env.Append(CCFLAGS = [ '-msse4'])
release_env.Append(CPPDEFINES = [ 'NDEBUG' ])
build_envs['release'] = release_env

for target in build_envs:
    env = build_envs[target]
    Export('env')
    output = SConscript(dirs = '.',
                        variant_dir = 'build/' + arch + '-' + target)
    env.Alias(target, output['defaults'])
    env.Default(target)
