# -*- mode: python -*-

import sys
arch = sys.platform

Import('env', 'std_libs')

renderer_src = [ 'main/pbrt.cpp' ]

tests_src = Glob('tests/*.cpp') + [ 'tests/gtest/gtest-all.cc', 'tests/gtest/gtest_main.cc' ]

core_src = [ 'core/api.cpp',           'core/camera.cpp',
             'core/error.cpp',         'core/film.cpp',           'core/fileutil.cpp',
             'core/filter.cpp',        'core/floatfile.cpp',      'core/efloat.cpp',
             'core/geometry.cpp',      'core/imageio.cpp', 
             'core/integrator.cpp',    'core/interaction.cpp',    'core/interpolation.cpp',
             'core/light.cpp',         'core/lowdiscrepancy.cpp',
             'core/material.cpp',      'core/medium.cpp',         'core/memory.cpp',         
             'core/microfacet.cpp',
             'core/parallel.cpp',      'core/paramset.cpp',       'core/parser.cpp',
             'core/primitive.cpp',     'core/progressreporter.cpp', 
             'core/quaternion.cpp',    'core/reflection.cpp',
             'core/sampler.cpp',       'core/sampling.cpp',
             'core/scene.cpp',         'core/shape.cpp',
             'core/spectrum.cpp',      'core/stats.cpp',          'core/sobolmatrices.cpp',
             'core/texture.cpp',       'core/transform.cpp' ]

ext_src = [ 'ext/targa.cpp',         'ext/tinyexr.cpp',  'ext/rply.cpp' ]

parser_flex = env.Object('core/pbrtlex.ll')
parser_bison = env.Object('core/pbrtparse.yy')
#env.Depends(parser_flex, parser_bison)
#parser_bison.pop()  # yuck a muck, but stop trying to link in pbrtparse.hh!
core_src = [ parser_flex, parser_bison ] + core_src


accelerators_src = [ 'accelerators/bvh.cpp', 
                     'accelerators/kdtreeaccel.cpp' ]
cameras_src = [ 'cameras/environment.cpp', 'cameras/orthographic.cpp', 
                'cameras/perspective.cpp', 'cameras/realistic.cpp' ]
filters_src = [ 'filters/box.cpp',              'filters/gaussian.cpp', 
                'filters/mitchell.cpp',         'filters/sinc.cpp',
                'filters/triangle.cpp' ]
integrators_src = [ 'integrators/directlighting.cpp', 
                    'integrators/path.cpp',
                    'integrators/volpath.cpp',
                    'integrators/whitted.cpp',
                    'integrators/bdpt.cpp', 
                    'integrators/mlt.cpp',
                    'integrators/sppm.cpp' ]
lights_src = [ 'lights/diffuse.cpp',           'lights/distant.cpp',
               'lights/goniometric.cpp',       'lights/infinite.cpp',
               'lights/point.cpp',             'lights/projection.cpp', 
               'lights/spot.cpp' ]
materials_src = [ 'materials/glass.cpp',         'materials/hair.cpp',
                  'materials/fourier.cpp',
                  'materials/kdsubsurface.cpp',
                  'materials/matte.cpp',
                  'materials/metal.cpp',         'materials/mirror.cpp',
                  'materials/mixmat.cpp',        'materials/plastic.cpp', 
                  'materials/substrate.cpp',     'materials/subsurface.cpp',
                  'materials/translucent.cpp',   'materials/uber.cpp',
                  ]
samplers_src = [ 'samplers/halton.cpp',
                 'samplers/maxmin.cpp',            'samplers/random.cpp',
                 'samplers/stratified.cpp',        'samplers/sobol.cpp',
                 'samplers/zerotwosequence.cpp' ]
shapes_src = [ 'shapes/cone.cpp',        'shapes/curve.cpp',
               'shapes/cylinder.cpp',    'shapes/disk.cpp',
               'shapes/heightfield.cpp',
               'shapes/hyperboloid.cpp', 'shapes/loopsubdiv.cpp',
               'shapes/nurbs.cpp',       'shapes/paraboloid.cpp',
               'shapes/plymesh.cpp',
               'shapes/sphere.cpp',      'shapes/triangle.cpp' ]
textures_src = [ 'textures/bilerp.cpp',          'textures/checkerboard.cpp',
                 'textures/constant.cpp',        'textures/dots.cpp',
                 'textures/fbm.cpp',             'textures/imagemap.cpp', 
                 'textures/marble.cpp',          'textures/mix.cpp',
                 'textures/scale.cpp',           'textures/uv.cpp',
                 'textures/windy.cpp',           'textures/wrinkled.cpp' ]
media_src = [ 'media/homogeneous.cpp',           'media/grid.cpp' ] 


lib_src = [ core_src + ext_src + accelerators_src + cameras_src + filters_src +
            integrators_src + lights_src + materials_src +
            samplers_src + shapes_src + textures_src + media_src ]

output = { }
output['pbrt_lib'] = env.StaticLibrary('libpbrt', lib_src)

output['pbrt'] = env.Program('pbrt', renderer_src + output['pbrt_lib'],
                             LIBS = std_libs)
output['pbrt_tests'] = env.Program('pbrt_tests', tests_src + output['pbrt_lib'],
                             LIBS = std_libs)
output['obj2pbrt'] = env.Program('obj2pbrt', [ 'tools/obj2pbrt.cpp' ])
output['exrdiff'] = env.Program('exrdiff', [ 'tools/exrdiff.cpp' ] + output['pbrt_lib'],
                                LIBS = std_libs)
output['exravg'] = env.Program('exravg', [ 'tools/exravg.cpp' ] + output['pbrt_lib'],
                               LIBS = std_libs)
output['bsdftest'] = env.Program('bsdftest', [ 'tools/bsdftest.cpp' ] +
                                 output['pbrt_lib'],
                                 LIBS = std_libs)
output['chi2test'] = env.Program('chi2test', [ 'tools/chi2test.cpp' ] +
                                 output['pbrt_lib'],
                                 LIBS = std_libs)
output['hdrtoldr'] = env.Program('hdrtoldr',
                                  [ 'tools/hdrtoldr.cpp' ] + output['pbrt_lib'],
                                  LIBS = std_libs)

output['defaults'] = [ output['pbrt'], output['obj2pbrt'], output['exrdiff'],
                       output['exravg'], output['hdrtoldr'], output['pbrt_tests'],
                       output['bsdftest'], output['chi2test'] ]

Return('output')
